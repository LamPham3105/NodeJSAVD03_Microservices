generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model banner {
  id          Int     @id @default(autoincrement())
  name        String?
  image_url   String?
  description String?
}

model categories {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  foods      foods[]
}

model foods {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(100)
  description    String?
  price          Decimal       @db.Decimal(10, 2)
  image_url      String?
  category_id    Int
  restaurant_id  Int
  stock          Int           @default(0)
  ratings_count  Int           @default(0)
  average_rating Decimal?      @default(0.0) @db.Decimal(3, 2)
  min_price      Decimal?      @db.Decimal(10, 2)
  max_price      Decimal?      @db.Decimal(10, 2)
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  updated_at     DateTime?     @default(now()) @db.Timestamp(6)
  categories     categories    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants    restaurants   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items    order_items[]
}

model order_items {
  id       Int     @id @default(autoincrement())
  order_id Int
  food_id  Int
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  foods    foods   @relation(fields: [food_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders   orders  @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id          Int           @id @default(autoincrement())
  user_id     Int
  total_price Decimal       @db.Decimal(10, 2)
  status      order_status? @default(pending)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  updated_at  DateTime?     @default(now()) @db.Timestamp(6)
  address     String?
  order_items order_items[]
  users       users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurants {
  id                     Int       @id @default(autoincrement())
  name                   String    @db.VarChar(100)
  address                String
  city                   String    @db.VarChar(50)
  open_time              DateTime  @db.Time(6)
  close_time             DateTime  @db.Time(6)
  average_rating         Decimal?  @default(0.0) @db.Decimal(3, 2)
  ratings_count          Int       @default(0)
  service_fee_percentage Decimal?  @default(0.8) @db.Decimal(5, 2)
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @default(now()) @db.Timestamp(6)
  image_url              String?
  kind                   String?
  foods                  foods[]
}

model users {
  id           Int       @id @default(autoincrement())
  first_name   String    @db.VarChar(50)
  last_name    String    @db.VarChar(50)
  username     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(100)
  phone_number String    @unique @db.VarChar(15)
  password     String    @db.VarChar(255)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  address      String?
  orders       orders[]
}

enum order_status {
  pending
  completed
  canceled
}
